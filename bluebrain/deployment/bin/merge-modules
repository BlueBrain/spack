#!/usr/bin/env spack-python
# vim: ft=python
"""Merges modules from separate build stages and removes obsolete ones
"""

import os

from argparse import ArgumentParser
from collections import defaultdict
from pathlib import Path

import spack.util.spack_yaml as syaml
from spack.version import Version


VERSION_TEMPLATE = """\
#%Module1.0
set ModulesVersion "{version}"
"""


def run():
    """Merges modules from separate build stages and removes obsolete ones"""
    parser = ArgumentParser()
    parser.add_argument("basedir", metavar="DIR", help="the base directory of the deployment")
    args = parser.parse_args()

    basedir = Path(args.basedir)
    module_root = basedir / "modules"
    modules = defaultdict(set)

    for stagedir in basedir.glob("stage_*"):
        stage = stagedir.name.split("_", 1)[1]
        outdir = module_root / stage
        outdir.mkdir(parents=True, exist_ok=True)
        index = {"module_index": {}}
        copied = set()
        print("Processing", stage)
        for moduledir in stagedir.glob("modules_tcl*"):
            print("  Reading {}".format(moduledir))
            with (moduledir / "module-index.yaml").open() as fd:
                data = syaml.load(fd)["module_index"]
                index["module_index"].update(data)
            for path in moduledir.glob("**/*"):
                if path.is_file() and path.suffix != ".yaml":
                    fragment = path.relative_to(moduledir)
                    name = fragment.parent
                    version = fragment.name
                    modules[name].add(version)
                    target = outdir / fragment
                    target.parent.mkdir(parents=True, exist_ok=True)
                    target.write_text(path.read_text())
                    copied.add(target)

        print("  Writing new module index")
        with (outdir / "module-index.yaml").open("w") as fd:
            syaml.dump(index, stream=fd)
        print("  Cleaning up obsolete modules")
        for path in outdir.glob("**/*"):
            if path.is_file() and path.suffix != ".yaml" and path not in copied:
                print("  ...deleting", path)
                path.unlink()

    print("  Determining default versions")
    for name, versions in modules.items():
        if len(versions) > 1:
            default_name = f"DEFAULT_{name.name.upper()}_VERSION"
            default_version = os.environ.get(default_name)
            if not default_version:
                first_raw = sorted(versions)[-1]
                first_parsed = sorted(versions, key=Version)[-1]
                if first_raw == first_parsed:
                    continue
                default_version = first_parsed
            (outdir / name / ".version").write_text(
                VERSION_TEMPLATE.format(version=default_version)
            )


if __name__ == "__main__":
    run()
