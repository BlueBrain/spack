#!/bin/bash -eu

log() {
    echo "$@" >&2
}

. "${SPACK_ROOT}/share/spack/setup-env.sh"

if [[ -z "${1:-}" ]]; then
    if [[ -z "${SPACK_ENV:-}" ]]; then
        echo "usage: configure-compilers SPACK_ENV"
        echo "       configure-compilers  # with an active environment"
        exit 1
    fi
    # Nothing to do, a spack environment should be active
else
    spack env activate "${1}"
fi

# Find the location of *any* GCC, disregarding the environment that's
# active (-E).  Prefer the hash passed through by earlier stages, if
# not available fall back to the crude version.
BINUTILS_DIR=$(spack -E location --install-dir ${BINUTILS_HASH:-binutils})
LEGACY_GCC_DIR=$(spack -E location --install-dir ${LEGACY_GCC_HASH:-gcc@${LEGACY_GCC_VERSION}})
DEFAULT_GCC_DIR=$(spack -E location --install-dir ${DEFAULT_GCC_HASH:-gcc@${DEFAULT_GCC_VERSION}})
log "...got DEFAULT_GCC_DIR=${DEFAULT_GCC_DIR}"
# Use the Spack configuration to grab the matching module for GCC;
# requires GCC to be compiler found beforehand.
GCC_MODULES="$(spack -E config get compilers|sed -n "
    /^\s*spec: gcc@${DEFAULT_GCC_VERSION}/,/^\s*modules:/ {
        /^\s*modules:/ {
            s/^\s*modules: \[\(.*\)\]\$/\1/;
            p;
        }
    }")"
log "...using gcc ${LEGACY_GCC_VERSION} from ${LEGACY_GCC_DIR} for Intel (legacy)"
log "...using gcc ${DEFAULT_GCC_VERSION} from ${DEFAULT_GCC_DIR} for modern Intel and NVHPC with module(s) ${GCC_MODULES}"
# Get the path to the binutils module
BINUTILS_MODULE=$(spack -E module tcl find --full-path ${BINUTILS_HASH})
log "...got binutils module ${BINUTILS_MODULE}"

while read -r line; do
    sha="${line%% *}"  # Remove everything after and including the first space
    spec="${line#* }"  # Remove everything up to and including the first space
    set +o nounset
    env_mods=""


    # Skip all but compilers. Compiler variants need to be specified
    # *after* the version specification!
    case "${spec}" in
        gcc@*)
            ;;
        intel@*)
            ;;
        intel-oneapi-compilers@*)
            ;;
        intel-parallel-studio@*)
            ;;
        llvm@*)
            ;;
        nvhpc@*)
            ;;
        *)
            continue
            ;;
    esac

    # When a compiler is compiled with *anything but the base
    # compiler*, it's module will not be generated in the initial
    # module refresh
    #
    # As the input should be sorted by compilers, the module generation
    # will now find the compilers that were used when bootstrapping.
    log "...processing ${line}"
    cmd=$(spack module tcl loads ${sha}|tail -n 1)
    echo "${cmd}"
    ${cmd}
    set -o nounset
    if [[ ${spec} != *"intel-parallel-studio"* ]]; then
        spack compiler find --scope=user
    fi

    GCC_DIR=${DEFAULT_GCC_DIR}
    if [[ ${spec} = "intel@"* ]]; then
        GCC_DIR=${LEGACY_GCC_DIR}
    fi

    if [[ ${spec} = *"intel"* ]]; then
        # update intel modules to use newer gcc in .cfg files
        INTEL_DIR=$(spack location --install-dir ${sha})
        # we don't want to modify any files in the upstream deployment,
        # thus ensure that the installation directory is prefixed by our
        # deployment target
        if [[ "${INTEL_DIR}" != "${DEPLOYMENT_ROOT}"* ]]; then
            log "...installation does not match install prefix, skipping modification of files"
        fi
        for f in $(find ${INTEL_DIR} -name "icc.cfg" -o -name "icpc.cfg" -o -name "ifort.cfg"); do
            if ! grep -q "${GCC_DIR}" $f; then
                echo "-gcc-name=${GCC_DIR}/bin/gcc" >> ${f}
                echo "-Xlinker -rpath=${GCC_DIR}/lib" >> ${f}
                echo "-Xlinker -rpath=${GCC_DIR}/lib64" >> ${f}
                log "updated ${f} with newer GCC"
            fi
        done
    elif [[ ${line} = *"nvhpc"* ]]; then
        # Configure NVHPC compilers to use an up to date version of the C++
        # standard library from the deployed version of GCC.
        NVHPC_DIR=$(dirname $(which makelocalrc))
        NVHPC_TMPDIR=$(mktemp -d -p .)
        # Try and avoid autoloaded dependencies of other compilers (looking
        # at you, LLVM) polluting the localrc of the NVIDIA compilers
        (
            module purge
            ${cmd}
            makelocalrc ${NVHPC_DIR} -d "${NVHPC_TMPDIR}" -gcc ${DEFAULT_GCC_DIR}/bin/gcc -gpp ${DEFAULT_GCC_DIR}/bin/g++ -g77 ${DEFAULT_GCC_DIR}/bin/gfortran -x
        )
        # olupton 2021-10-15: is this still needed? Not sure.
        echo "set PREOPTIONS=-D__GCC_ATOMIC_TEST_AND_SET_TRUEVAL=1;" >> "${NVHPC_TMPDIR}/localrc"
        log "NVIDIA localrc template"
        cat "${NVHPC_TMPDIR}/localrc"
        if [[ "${NVHPC_DIR}" != "${DEPLOYMENT_ROOT}"* ]]; then
            log "...installation does not match install prefix, skipping modification of files"
        else
            cp -v "${NVHPC_TMPDIR}/localrc" "${NVHPC_DIR}/localrc"
        fi
        rm -rf "${NVHPC_TMPDIR}"
    fi
    cmd=${cmd/load/unload}
    echo "${cmd}"
    ${cmd}

    cmd=${cmd/unload/show/}
    full_module_path="$(${cmd}|&sed -ne '2{s/:$// p}')"
    if [[ $line = *"nvhpc"* ]]; then
        if [[ -n $GCC_MODULES ]]; then
            full_module_path="${GCC_MODULES},${full_module_path}"
        else
            log "unable to add GCC module(s) to NVHPC definition"
            exit 1
        fi
        if [[ -n $BINUTILS_MODULE ]]; then
            full_module_path="${BINUTILS_MODULE},${full_module_path}"
        else
            log "unable to add binutils module to NVHPC definition"
            exit 1
        fi
    elif [[ $line = "intel-oneapi-compilers@"* ]]; then
        if [[ -n $GCC_MODULES ]]; then
            full_module_path="${GCC_MODULES},${full_module_path}"
        else
            log "unable to add GCC module(s) to Intel One definition"
            exit 1
        fi
        if [[ -n $BINUTILS_MODULE ]]; then
            full_module_path="${BINUTILS_MODULE},${full_module_path}"
        else
            log "unable to add binutils module to Intel One definition"
            exit 1
        fi
    fi
    spec=${spec%%[+ ]*}             # truncate variants
    spec=${spec/llvm/clang}         # LLVM identifies as clang
    spec=${spec/20.0.4/19.1.3.304}  # Intel identifies as an older version
    # Intel oneapiâ„¢ is split into two, gains another version tidbit
    spec=${spec/intel-oneapi-compilers@2021.4.0/\\(intel\\|oneapi\\)@2021.4.0}
    # Remove empty module definitions, as they may appear anywhere
    # under the compiler key. Further, purge some garbage where clang's
    # spec spans multiple lines with a quote in front.
    #
    # After removing all unnecessary stuff, re-add the appropriate
    # module definition with a full path.
    sed -i -e '
        /modules: \[\]/ d;
        /^\s*Target:.\s*$/ d;
        /^\s*$/ d;
        s#spec: .clang#spec: clang#
        s#\( *\)spec: '"${spec}"'#&\n\1modules: ['"${full_module_path}"']#' ${HOME}/.spack/compilers.yaml
done

sed  -i 's#.*f\(77\|c\): null#      f\1: /usr/bin/gfortran#' ${HOME}/.spack/compilers.yaml
